AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for VPC, EC2, S3, DynamoDB, S3 Event Notifications, and SNS."

Parameters:
  VpcCIDR:
    Type: String
    Default: "10.0.0.0/16"
  
  PublicSubnetCIDR:
    Type: String
    Default: "10.0.1.0/24"

  PrivateSubnet1CIDR:
    Type: String
    Default: "10.0.2.0/24"
  
  PrivateSubnet2CIDR:
    Type: String
    Default: "10.0.3.0/24"
  
  PrivateSubnet3CIDR:
    Type: String
    Default: "10.0.4.0/24"

  ImageId:
    Type: AWS::EC2::Image::Id
    Description: "Provide a valid AMI ID for your AWS region"

  InstanceType:
    Type: String
    Default: "t2.micro"
  
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Enter the name of an existing EC2 KeyPair"

Resources:

  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: EmployeeVPC

  # Subnets
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [1, !GetAZs ""]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [2, !GetAZs ""]

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      AvailabilityZone: !Select [0, !GetAZs ""]

  # Internet Gateway & Route Table
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Security Group
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH and HTTP access"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Network ACL
  PublicSubnetACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC

  AllowInboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: EmployeeAppInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo yum update -y
          sudo yum install -y python3 python3-pip git mysql
          sudo pip3 install flask boto3 pymysql
          cd /home/ec2-user
          git clone https://github.com/hiteshchauhan89/aws-code-main.git
          cd aws-code-main
          nohup python3 EmpApp.py > app.log 2>&1 &

  # S3 Bucket for Static Website Hosting
  EmployeeS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "employee-static-website-${AWS::AccountId}"
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "error.html"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # DynamoDB Table
  EmployeeDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "EmployeeData"
      AttributeDefinitions:
        - AttributeName: "EmployeeID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "EmployeeID"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  # S3 Event Notifications (Triggers SNS)
  S3EventNotification:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref S3LambdaFunction
      Principal: "s3.amazonaws.com"
      SourceArn: !GetAtt EmployeeS3Bucket.Arn

  # Lambda Function for S3 Event
  S3LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "S3EventProcessor"
      Runtime: "python3.8"
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              print("S3 Event Received:", json.dumps(event))
              return {"statusCode": 200, "body": "Event Processed"}

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaS3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "${EmployeeS3Bucket.Arn}/*"

  # SNS Topic
  EmployeeSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "EmployeeNotifications"

  EmployeeSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref EmployeeSNSTopic
      Protocol: email
      Endpoint: "your-email@example.com"

Outputs:
  VpcId:
    Value: !Ref MyVPC

  PublicSubnetId:
    Value: !Ref PublicSubnet

  EC2InstanceId:
    Value: !Ref EC2Instance

  EmployeeS3BucketName:
    Value: !Ref EmployeeS3Bucket

  DynamoDBTableName:
    Value: !Ref EmployeeDynamoDBTable

  SNSTopicARN:
    Value: !Ref EmployeeSNSTopic
